// Copyright Coffee Stain Studios. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "UObject/Object.h"
#include "Online/OnlineError.h"
#include "Online/Connectivity.h"

#include "OnlineIntegrationTypes.generated.h"

namespace UE::Online
{
enum class ELoginStatus : uint8;
enum class EPrivilegeResults : uint32;
enum class EUserPrivileges : uint8;
using IAuthPtr = TSharedPtr<class IAuth>;
using IOnlineServicesPtr = TSharedPtr<class IOnlineServices>;
template <typename OpType>
class TOnlineResult;
struct FAuthLogin;
struct FConnectionStatusChanged;
struct FExternalUIShowLoginUI;
struct FAuthLoginStatusChanged;
struct FQueryUserPrivilege;
struct FAccountInfo;
}

using FOnlineErrorType = UE::Online::FOnlineError;
using ELoginStatusType = UE::Online::ELoginStatus;
class UTexture2D;

/** Enum specifying different privileges and capabilities available to a user */
UENUM(BlueprintType)
enum class ECommonUserPrivilege : uint8
{
	/** Whether the user can play at all, online or offline */
	CanPlay,

	/** Whether the user can play in online modes */
	CanPlayOnline,

	/** Whether the user can use text chat */
	CanCommunicateViaTextOnline,

	/** Whether the user can use voice chat */
	CanCommunicateViaVoiceOnline,

	/** Whether the user can access content generated by other users */
	CanUseUserGeneratedContent,

	/** Whether the user can ever participate in cross-play */
	CanUseCrossPlay,

	/** Invalid privilege (also the count of valid ones) */
	Invalid_Count UMETA(Hidden)
};

/** Enum specifying the general availability of a feature or privilege, this combines information from multiple sources */
UENUM(BlueprintType)
enum class ECommonUserPrivilegeAvailability : uint8
{
	/** State is completely unknown and needs to be queried */
	Unknown,

	/** This feature is fully available for use right now */
	NowAvailable,

	/** This might be available after the completion of normal login procedures */
	PossiblyAvailable,

	/** This feature is not available now because of something like network connectivity but may be available in the future */
	CurrentlyUnavailable,

	/** This feature will never be available for the rest of this session due to hard account or platform restrictions */
	AlwaysUnavailable,

	/** Invalid feature */
	Invalid,
};

/** Enum giving specific reasons why a user may or may not use a certain privilege */
UENUM(BlueprintType)
enum class ECommonUserPrivilegeResult : uint8
{
	/** State is unknown and needs to be queried */
	Unknown,

	/** This privilege is fully available for use */
	Available,

	/** User has not fully logged in */
	UserNotLoggedIn,

	/** User does not own the game or content */
	LicenseInvalid,

	/** The game needs to be updated or patched before this will be available */
	VersionOutdated,

	/** No network connection, this may be resolved by reconnecting */
	NetworkConnectionUnavailable,

	/** Parental control failure */
	AgeRestricted,

	/** Account does not have a required subscription or account type */
	AccountTypeRestricted,

	/** Another account/user restriction such as being banned by the service */
	AccountUseRestricted,

	/** Other platform-specific failure */
	PlatformFailure,
};

UENUM(BlueprintType)
enum class EOnlineBackendConnectionStatus: uint8
{
	Connected,
	NotConnected
};

/**
 * The joining policy of an online session. Only relevant for sessions whose mode is Online
 */
UENUM(BlueprintType)
enum class ECommonSessionJoinPolicy: uint8
{
	/**
	 * @brief Session can be searched for online and joined by anyone
	 */
	Public,

	/**
	 * @brief Session can be joined by presence - can be thought as friends only
	 */
	FriendsOnly,

	/**
	 * @brief Session can be joined by direct invitation only
	 */
	InviteOnly,
};

/** Detailed information about the online error. Effectively a wrapper for FOnlineError. */
USTRUCT(BlueprintType)
struct FOnlineResultInformation
{
	GENERATED_BODY()

	/** Whether the operation was successful or not. If it was successful, the error fields of this struct will not contain extra information. */
	UPROPERTY(BlueprintReadOnly)
	bool bWasSuccessful = true;

	/** The unique error id. Can be used to compare against specific handled errors. */
	UPROPERTY(BlueprintReadOnly)
	FString ErrorId;

	/** Error text to display to the user. */
	UPROPERTY(BlueprintReadOnly)
	FText ErrorText;

	/**
	 * Initialize this from an FOnlineErrorType
	 * @param InOnlineError the online error to initialize from
	 */
	void ONLINEINTEGRATION_API FromOnlineError(const FOnlineErrorType& InOnlineError);
};

UENUM(BlueprintType)
enum class ECommonUserOnlineLoginResult: uint8
{
	Success,
	DifferentAccountsLinked,
	ContinuationRequired,
	OtherError
};

UENUM(BlueprintType)
enum class ECommonUserLoginStatus: uint8
{
	/** Player has not logged in or chosen a local profile. */
	NotLoggedIn,
	/** Player is using a local profile but is not logged in. */
	UsingLocalProfile,
	/** Player is logged in but may have reduced functionality with online services. */
	LoggedInReducedFunctionality,
	/** Player has been validated by the platform specific authentication service. */
	LoggedIn
};

USTRUCT(BlueprintType)
struct ONLINEINTEGRATION_API FPlayerAvatar
{
	GENERATED_BODY()
	
	UPROPERTY(BlueprintReadOnly)
	TObjectPtr<UTexture2D> Texture2D;

	bool operator==(const FPlayerAvatar& Other) const
	{
		return Texture2D == Other.Texture2D;
	}
};

USTRUCT()
struct FOnlineBackendAuthenticationSettings
{
	GENERATED_BODY()

	UPROPERTY()
	FName ServiceProvider = NAME_None;

	UPROPERTY()
	TArray<FName> LoginTypes;

	UPROPERTY()
	FName ExternalAuthTokenServiceProvider = NAME_None;

	UPROPERTY()
	FString ExternalAuthTokenPayload;

	UPROPERTY()
	bool bForgetAuth = false;
};
