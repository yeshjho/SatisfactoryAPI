// Copyright Coffee Stain Studios. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/SaveGame.h"
#include "Server/FGTLSTypes.h"
#include "FGServerSettings.generated.h"

/** Data about a password that is stored in the filesystem */
USTRUCT()
struct FACTORYDEDICATEDSERVER_API FFGStoredPasswordData
{
	GENERATED_BODY()

	// Hash of the salted plaintext password
	UPROPERTY( SaveGame )
	FString PasswordHash;

	// Salt that was appended to the password before it got hashed, in the plaintext
	UPROPERTY( SaveGame )
	FString PasswordSalt;
};

/** Contains a previously generated self-signed certificate for the Server API */
USTRUCT()
struct FACTORYDEDICATEDSERVER_API FFGGeneratedCertificateData
{
	GENERATED_BODY()

	// The generated self-signed certificate for the server
	TOSSLDataWrapper<EOSSLDataType::X509> Certificate;

	// The private key for the generated self-signed certificate
	TOSSLDataWrapper<EOSSLDataType::EVP_PKEY> PrivateKey;

	bool Serialize(FArchive& Ar);
	bool Identical( const FFGGeneratedCertificateData* CertificateData, uint32 PortFlags ) const;
};

/**
 * Server settings saved for the running server instance
 */
UCLASS()
class FACTORYDEDICATEDSERVER_API UFGServerSettings : public USaveGame
{
	GENERATED_BODY()
public:
	/** Just a friendly name for this server. Can be used in UI dialogs to identify the server */
	UPROPERTY( SaveGame )
	FString ServerName;

	/** If set, the most recent save from this session will be automatically loaded on server startup */
	UPROPERTY( SaveGame )
	FString AutoLoadSessionName;

	/** Admin password set on the server. Used to access administration based functions of the Server API */
	UPROPERTY( SaveGame )
	FFGStoredPasswordData AdminPassword;

	/** Client password set on the server. Required to join the game in the first place. */
	UPROPERTY( SaveGame )
	FFGStoredPasswordData ClientPassword;

	/** Additional salt to add to the API tokens generated by the server. Allows invalidating all issued tokens at once. */
	UPROPERTY( SaveGame )
	FGuid APITokenSeed;

	/** Server secret encoded as hex nibble string. Used to hash the data used for the tokens and generate the fingerprint */
	UPROPERTY( SaveGame )
	FString ServerSecret;

	/** Generated certificate data that should be re-used across server restarts */
	UPROPERTY( SaveGame )
	FFGGeneratedCertificateData CertificateData;
};

template<>
struct TStructOpsTypeTraits<FFGGeneratedCertificateData> : TStructOpsTypeTraitsBase2<FFGGeneratedCertificateData>
{
	enum
	{
		WithSerializer = true,
		WithIdentical = true
	};
};
